Question 1: What's relationship between Apache Zookeeper and paxos protocol?
相同之处：两者都使用了quorum机制保证分布式系统的一致性。
不同之处：
	（1）Zookeeper使用了Zab算法，是Primary/Backup model。而paxos协议针对的是Replicated state machines设计的。
	（2）Zookeeper中同一时间最多有1个promoter，新的leader的选举需要一个同步的阶段。paxos协议允许同时存在多个promoter。


Question 2: Many databases or file systems also provide distributed replication support. However, many real-world applications choose Zookeeper for configurations management. Why? What feature of Zookeeper makes it an excellent choice for configuration management?
数据库和文件系统的分布式复制集可以保证数据库服务和文件系统服务的可用性，并且提高性能。对分布式数据库和文件系统修改配置需要将每个节点的配置文件逐一修改，维护开销大。如果各个节点要实时获得集群最新的配置，每个节点需要对整个集群进行不断扫描，对每个节点造成很大的压力。使用Zookeeper统一管理配置文件，可以减少维护的开销。通过Zookeeper的发布订阅机制使得集群中的各个节点监听其数据修改，可以保证每个节点实时获得集群最新的配置。Zookeeper的Zab算法保证了Zookeeper集群的可用性。


Question 3: Please implement the naming service by yourself. You need to submit your source codes and all extended docker files in the final answer package and briefly describe your implementation in the document.
Zookeeper watcher的实现：源码在/zkpwatcher目录下。使用了java的ZkClient库。Zookeeper watcher进程连接上Zookeeper后，将自己所在容器的域名和IP地址写入Zookeeper的/hosts的节点下的对应域名的子节点中，如果同名子节点存在则更新该子节点。订阅/hosts节点的子节点变更，每当/hosts有新的节点加入，则订阅新节点的数据变更。订阅所有/hosts的子节点的数据变更，每当有新数据写入节点，则更新到本地的/etc/hosts中。
Dockerfile： 扩展的dockerfile在/mydockerfile目录下。所有容器继承handson3中的容器。所有容器的入口是一个shell脚本。shell脚本先在后台启动Zookeeper watcher进程，再启动原来容器的入口进程。

Question 4: Please partition the database according to the previous description and briefly introduct your solution.
启动三个mongo容器，域名分别为orders-db、carts-db、user-db，在容器启动时后台跑一个Zookeeper watcher进程，将自己的域名和IP地址注册到Zookeeper集群中。orders、carts、user容器的watcher可以在Zookeeper获取对应数据库的IP地址。